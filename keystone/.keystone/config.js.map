{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts", "../lib/accessEnv.ts"],
  "sourcesContent": ["import { config } from '@keystone-6/core';\nimport \"dotenv/config\";\nimport { lists } from './schema';\n\nimport { withAuth, session } from './auth';\nimport { accessEnv } from './lib/accessEnv';\n\nconst databaseURL = process.env[\"DATABASE_URL\"] || \"postgres://postgres\"\nconst deployPrevURL = new RegExp(accessEnv(\"DEPLOY_PREV_URL\", \"localhost\"));\nconst prodUrl = accessEnv(\"PROD_URL\", \"https://www.saintsalo.com/\");\nconst port = parseInt(accessEnv(\"PORT\", \"5000\"));\n\nexport default withAuth(\n  config({\n    graphql: {\n      debug: process.env.NODE_ENV !== \"production\",\n      // debug: true,\n      // queryLimits: { maxTotalResults: 100 },\n      path: \"/api/graphql\",\n      cors: {\n        origin: [new RegExp(\"localhost\"), deployPrevURL, prodUrl],\n        credentials: true,\n      },\n      apolloConfig: {\n        debug: true,\n      },\n    },\n    server: {\n      cors: {\n        origin: [new RegExp(\"localhost\"), deployPrevURL, prodUrl],\n        credentials: true,\n      },\n      port,\n    },\n    db: {\n      provider: 'postgresql',\n      url: databaseURL,\n      // useMigrations: process.env.NODE_ENV === \"production\" || false,\n      useMigrations: true,\n    },\n    lists,\n    session,\n  })\n);\n", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n} from '@keystone-6/core/fields';\n\n\nimport { document } from '@keystone-6/fields-document';\n\nimport type { Lists } from '.keystone/types';\n\nexport const lists: Lists = {\n  User: list({\n    access: allowAll,\n    fields: {\n      name: text({ validation: { isRequired: true } }),\n      email: text({\n        validation: { isRequired: true },\n        isIndexed: 'unique',\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n      posts: relationship({ ref: 'Post.author', many: true }),\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  }),\n  Image: list({\n    access: allowAll,\n    fields: {\n      // image: cloudinaryImage({ cloudinary, label: \"Project Image\" }),\n      filename: text({ validation: { isRequired: true } }),\n      altText: text({ validation: { isRequired: true } }),\n      name: text({ validation: { isRequired: true }, label: \"Name (Caption)\" }),\n    }\n  }),\n  Post: list({\n    access: allowAll,\n    fields: {\n      createdAt: timestamp({\n        defaultValue: { kind: 'now' },\n      }),\n      seo: text(),\n      name: text({ validation: { isRequired: true } }),\n      slug: text({ validation: { isRequired: true }, isIndexed: \"unique\" }),\n      promo: relationship({ ref: \"Image\", many: false }),\n      images: relationship({ ref: \"Image\", many: true }),\n      author: relationship({\n        // we could have used 'User', but then the relationship would only be 1-way\n        ref: 'User.posts',\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineConnect: true,\n        },\n        many: false,\n      }),\n      order: text({ label: \"Order (priority)\"}),\n      content: document({\n        label: \"Short Description\",\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n        links: true,\n        dividers: true,\n      }),\n      embed: text({\n        ui: {\n          displayMode: \"textarea\"\n        }\n      }),\n      status: select({\n        defaultValue: \"offline\",\n        options: [\n          { label: \"Published\", value: \"live\" },\n          { label: \"Offline\", value: \"offline\" },\n          { label: \"Archived\", value: \"archived\" },\n        ],\n        ui: {\n          displayMode: \"segmented-control\",\n        },\n      }),\n      type: select({\n        defaultValue: \"music\",\n        options: [\n          { label: \"Music\", value: \"music\" },\n          { label: \"Project\", value: \"project\" },\n          { label: \"News\", value: \"news\" },\n        ],\n        ui: {\n          displayMode: \"segmented-control\",\n        },\n      }),\n      description: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n        links: true,\n        dividers: true,\n      }),\n    },\n  }),\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\nimport { accessEnv } from './lib/accessEnv';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\nconst sessionDomain = accessEnv(\"DOMAIN_URL\", \"localhost\")\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n  domain: sessionDomain,\n});\n\nexport { withAuth, session };\n", "import \"dotenv/config\";\n\nconst cache: { [key: string]: string } = {};\n\nexport const accessEnv = (key: string, defaultValue?: string): string => {\n  if (!(key in process.env) || typeof process.env[key] === undefined) {\n    if (defaultValue) return defaultValue;\n    throw new Error(`${key} not found in process.env!`);\n  }\n\n  if (!(key in cache)) {\n    cache[key] = <string>process.env[key];\n  }\n\n  return cache[key];\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,eAAuB;AACvB,IAAAC,iBAAO;;;ACDP,kBAAqB;AACrB,oBAAyB;AAEzB,oBAMO;AAGP,6BAAyB;AAIlB,IAAM,QAAe;AAAA,EAC1B,UAAM,kBAAK;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,MACN,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAC/C,WAAO,oBAAK;AAAA,QACV,YAAY,EAAE,YAAY,KAAK;AAAA,QAC/B,WAAW;AAAA,MACb,CAAC;AAAA,MAED,cAAU,wBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MACvD,WAAO,4BAAa,EAAE,KAAK,eAAe,MAAM,KAAK,CAAC;AAAA,MACtD,eAAW,yBAAU;AAAA,QACnB,cAAc,EAAE,MAAM,MAAM;AAAA,MAC9B,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAAA,EACD,WAAO,kBAAK;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA;AAAA,MAEN,cAAU,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MACnD,aAAS,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAClD,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,GAAG,OAAO,iBAAiB,CAAC;AAAA,IAC1E;AAAA,EACF,CAAC;AAAA,EACD,UAAM,kBAAK;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,MACN,eAAW,yBAAU;AAAA,QACnB,cAAc,EAAE,MAAM,MAAM;AAAA,MAC9B,CAAC;AAAA,MACD,SAAK,oBAAK;AAAA,MACV,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,MAC/C,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,GAAG,WAAW,SAAS,CAAC;AAAA,MACpE,WAAO,4BAAa,EAAE,KAAK,SAAS,MAAM,MAAM,CAAC;AAAA,MACjD,YAAQ,4BAAa,EAAE,KAAK,SAAS,MAAM,KAAK,CAAC;AAAA,MACjD,YAAQ,4BAAa;AAAA;AAAA,QAEnB,KAAK;AAAA;AAAA,QAGL,IAAI;AAAA,UACF,aAAa;AAAA,UACb,YAAY,CAAC,QAAQ,OAAO;AAAA,UAC5B,YAAY,EAAE,QAAQ,CAAC,QAAQ,OAAO,EAAE;AAAA,UACxC,YAAY;AAAA,UACZ,eAAe;AAAA,QACjB;AAAA,QACA,MAAM;AAAA,MACR,CAAC;AAAA,MACD,WAAO,oBAAK,EAAE,OAAO,mBAAkB,CAAC;AAAA,MACxC,aAAS,iCAAS;AAAA,QAChB,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,GAAG,CAAC;AAAA,UACR,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,GAAG,CAAC;AAAA,QACV;AAAA,QACA,OAAO;AAAA,QACP,UAAU;AAAA,MACZ,CAAC;AAAA,MACD,WAAO,oBAAK;AAAA,QACV,IAAI;AAAA,UACF,aAAa;AAAA,QACf;AAAA,MACF,CAAC;AAAA,MACD,YAAQ,sBAAO;AAAA,QACb,cAAc;AAAA,QACd,SAAS;AAAA,UACP,EAAE,OAAO,aAAa,OAAO,OAAO;AAAA,UACpC,EAAE,OAAO,WAAW,OAAO,UAAU;AAAA,UACrC,EAAE,OAAO,YAAY,OAAO,WAAW;AAAA,QACzC;AAAA,QACA,IAAI;AAAA,UACF,aAAa;AAAA,QACf;AAAA,MACF,CAAC;AAAA,MACD,UAAM,sBAAO;AAAA,QACX,cAAc;AAAA,QACd,SAAS;AAAA,UACP,EAAE,OAAO,SAAS,OAAO,QAAQ;AAAA,UACjC,EAAE,OAAO,WAAW,OAAO,UAAU;AAAA,UACrC,EAAE,OAAO,QAAQ,OAAO,OAAO;AAAA,QACjC;AAAA,QACA,IAAI;AAAA,UACF,aAAa;AAAA,QACf;AAAA,MACF,CAAC;AAAA,MACD,iBAAa,iCAAS;AAAA,QACpB,YAAY;AAAA,QACZ,SAAS;AAAA,UACP,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,GAAG,CAAC;AAAA,UACR,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,CAAC;AAAA,UACL,CAAC,GAAG,GAAG,CAAC;AAAA,QACV;AAAA,QACA,OAAO;AAAA,QACP,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;;;ACzGA,oBAA4B;AAC5B,kBAA2B;AAG3B,qBAAkC;;;ACrBlC,oBAAO;AAEP,IAAM,QAAmC,CAAC;AAEnC,IAAM,YAAY,CAAC,KAAa,iBAAkC;AACvE,MAAI,EAAE,OAAO,QAAQ,QAAQ,OAAO,QAAQ,IAAI,GAAG,MAAM,QAAW;AAClE,QAAI;AAAc,aAAO;AACzB,UAAM,IAAI,MAAM,GAAG,GAAG,4BAA4B;AAAA,EACpD;AAEA,MAAI,EAAE,OAAO,QAAQ;AACnB,UAAM,GAAG,IAAY,QAAQ,IAAI,GAAG;AAAA,EACtC;AAEA,SAAO,MAAM,GAAG;AAClB;;;ADWA,IAAI,gBAAgB,QAAQ,IAAI;AAChC,IAAI,CAAC,iBAAiB,QAAQ,IAAI,aAAa,cAAc;AAC3D,sBAAgB,2BAAY,EAAE,EAAE,SAAS,KAAK;AAChD;AAEA,IAAM,gBAAgB,UAAU,cAAc,WAAW;AAGzD,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC9B,SAAS;AAAA,EACT,eAAe;AAAA;AAAA;AAAA;AAAA,EAKf,aAAa;AAAA,EACb,aAAa;AAAA;AAAA;AAAA,EAIb,eAAe;AAAA;AAAA;AAAA;AAAA,IAIb,QAAQ,CAAC,QAAQ,SAAS,UAAU;AAAA;AAAA;AAAA,EAItC;AACF,CAAC;AAKD,IAAM,gBAAgB,KAAK,KAAK,KAAK;AAGrC,IAAM,cAAU,kCAAkB;AAAA,EAChC,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AACV,CAAC;;;AF5DD,IAAM,cAAc,QAAQ,IAAI,cAAc,KAAK;AACnD,IAAM,gBAAgB,IAAI,OAAO,UAAU,mBAAmB,WAAW,CAAC;AAC1E,IAAM,UAAU,UAAU,YAAY,4BAA4B;AAClE,IAAM,OAAO,SAAS,UAAU,QAAQ,MAAM,CAAC;AAE/C,IAAO,mBAAQ;AAAA,MACb,qBAAO;AAAA,IACL,SAAS;AAAA,MACP,OAAO,QAAQ,IAAI,aAAa;AAAA;AAAA;AAAA,MAGhC,MAAM;AAAA,MACN,MAAM;AAAA,QACJ,QAAQ,CAAC,IAAI,OAAO,WAAW,GAAG,eAAe,OAAO;AAAA,QACxD,aAAa;AAAA,MACf;AAAA,MACA,cAAc;AAAA,QACZ,OAAO;AAAA,MACT;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,QAAQ,CAAC,IAAI,OAAO,WAAW,GAAG,eAAe,OAAO;AAAA,QACxD,aAAa;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA,IACA,IAAI;AAAA,MACF,UAAU;AAAA,MACV,KAAK;AAAA;AAAA,MAEL,eAAe;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;",
  "names": ["import_core", "import_config"]
}
